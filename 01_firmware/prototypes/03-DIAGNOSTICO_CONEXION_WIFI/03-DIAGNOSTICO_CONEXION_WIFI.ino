/**
 * @file      03-DIAGNOSTICO_CONEXION_WIFI.INO
 * @author    Blue Box Team
 * @brief     Script de diagn√≥stico para probar la conexi√≥n a una red WiFi. üì°
 * @version   1.0
 * @date      2025-07-29
 *
 * @project   Rover para Competencia NASA (Blue Box)
 *
 * @note      üí° Este c√≥digo es una prueba fundamental para validar que el hardware
 * del ESP32 y la librer√≠a `WiFi.h` funcionan correctamente. Intenta conectarse
 * a una red WiFi espec√≠fica y obtener una direcci√≥n IP. El √©xito en esta
 * operaci√≥n confirma que el stack de red del dispositivo est√° operativo.
 *
 * @usage     1. ‚ö†Ô∏è **IMPORTANTE:** Reemplaza el valor de `ssid` y `password` con las
 * credenciales de tu red WiFi.
 * 2. Carga este c√≥digo en el ESP32.
 * 3. Abre el Monitor Serie a 115200 baudios.
 * 4. Observa si el ESP32 logra conectarse y obtener una IP.
 */

//==============================================================================
// INCLUSI√ìN DE LIBRER√çAS üìö
//==============================================================================
#include "WiFi.h"

//==============================================================================
// CONFIGURACI√ìN DE RED üåê
//==============================================================================

// --- ‚ö†Ô∏è ¬°DEBES MODIFICAR ESTAS L√çNEAS! ---
const char* ssid = "ANGEL";         ///< @brief Nombre de tu red WiFi (SSID).
const char* password = "12345678";  ///< @brief Contrase√±a de tu red WiFi.
// -----------------------------------------

//==============================================================================
// CONFIGURACI√ìN INICIAL (SETUP) ‚öôÔ∏è
//==============================================================================
void setup() {
  // Inicia la comunicaci√≥n serial para mostrar el estado.
  Serial.begin(115200);
  delay(100);

  Serial.println("\nIniciando prueba de conexi√≥n WiFi...");
  Serial.print("Conectando a la red: ");
  Serial.println(ssid);

  // Inicia el proceso de conexi√≥n WiFi.
  WiFi.begin(ssid, password);

  // Bucle de espera para la conexi√≥n con un tiempo l√≠mite.
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) { // Intenta por ~10 segundos
    delay(500);
    Serial.print(".");
    attempts++;
  }

  Serial.println(); // Salto de l√≠nea est√©tico.

  // Verifica el resultado final de la conexi√≥n.
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("‚úÖ ¬°Conexi√≥n exitosa!");
    Serial.print("   Direcci√≥n IP obtenida: ");
    Serial.println(WiFi.localIP()); // Imprime la IP asignada por el router.
  } else {
    Serial.println("‚ùå Fallo en la conexi√≥n.");
    Serial.println("   Revisa el SSID y la contrase√±a.");
    Serial.print("   C√≥digo de estado WiFi: ");
    Serial.println(WiFi.status()); // Muestra el c√≥digo de error para depuraci√≥n.
  }
}

//==============================================================================
// BUCLE PRINCIPAL (LOOP) üîÑ
//==============================================================================
void loop() {
  // El loop se puede dejar vac√≠o, ya que la conexi√≥n se realiza una sola vez.
  // Se a√±ade una pausa larga para evitar que el loop se ejecute innecesariamente.
  delay(10000);
}
/**
 * @file      02-UTILIDAD_OBTENER_MAC_BAJO_NIVEL.INO
 * @author    Blue Box Team
 * @brief     Script de diagn√≥stico para obtener la direcci√≥n MAC de un ESP32. üíª
 * @version   1.0
 * @date      2025-07-29
 *
 * @project   Rover para Competencia NASA (Blue Box)
 *
 * @note      üí° Este c√≥digo es una herramienta de prueba. Su prop√≥sito es obtener la
 * direcci√≥n MAC llamando a una funci√≥n de bajo nivel del ESP-IDF (`esp_efuse_mac_get_default`),
 * sin depender de la librer√≠a `WiFi.h` de Arduino. Es √∫til para diagnosticar
 * si un problema de red podr√≠a estar en la capa de abstracci√≥n de Arduino o
 * en un nivel m√°s profundo del hardware/firmware.
 *
 * @usage     1. Cargar este c√≥digo en el ESP32.
 * 2. Abrir el Monitor Serie a 115200 baudios.
 * 3. Observar la direcci√≥n MAC que se imprime en la consola.
 */

//==============================================================================
// INCLUSI√ìN DE LIBRER√çAS üìö
//==============================================================================
#include "esp_system.h" // Funciones del sistema base de ESP-IDF
#include "esp_mac.h"    // Funciones espec√≠ficas para la gesti√≥n de la MAC

//==============================================================================
// CONFIGURACI√ìN INICIAL (SETUP) ‚öôÔ∏è
//==============================================================================
void setup() {
  // Inicia la comunicaci√≥n serial para mostrar resultados.
  Serial.begin(115200);
  delay(500); // Peque√±a pausa para estabilizar la comunicaci√≥n.

  // Array de 6 bytes para almacenar la direcci√≥n MAC.
  uint8_t mac_addr[6];

  // Llama a la funci√≥n de bajo nivel para obtener la MAC por defecto.
  esp_err_t result = esp_efuse_mac_get_default(mac_addr);
  
  // üí° Alternativa: Si la funci√≥n anterior falla, se podr√≠a probar esta otra.
  // esp_err_t result = esp_read_mac(mac_addr, ESP_MAC_WIFI_STA);

  Serial.println("Intentando leer la MAC con un m√©todo de bajo nivel...");

  if (result == ESP_OK) {
    Serial.print("‚úÖ La direcci√≥n MAC de este ESP32 es: ");
    
    // Imprime cada byte de la direcci√≥n en formato hexadecimal.
    for (int i = 0; i < 6; ++i) {
      if (mac_addr[i] < 0x10) {
        Serial.print("0"); // A√±ade un cero inicial para formato (e.g., 0A en vez de A).
      }
      Serial.print(mac_addr[i], HEX);
      if (i < 5) {
        Serial.print(":"); // Separador.
      }
    }
    Serial.println();
  } else {
    Serial.println("‚ùå Fallo al leer la direcci√≥n MAC.");
    Serial.print("C√≥digo de error: ");
    Serial.println(result); // Imprime el c√≥digo de error para depuraci√≥n.
  }
}

//==============================================================================
// BUCLE PRINCIPAL (LOOP) üîÑ
//==============================================================================
void loop() {
  // El loop se deja vac√≠o, ya que el programa solo se ejecuta una vez.
}